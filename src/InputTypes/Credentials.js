const AUTOGENERATED_KEY = 'autogenerated'

/**
 * @implements {TooltipItemRenderer}
 */
class CredentialsTooltipItem {
    /** @type {CredentialsObject} */
    #data;
    /** @param {CredentialsObject} data */
    constructor (data) {
        this.#data = data
    }
    id = () => String(this.#data.id)
    labelMedium (_subtype) {
        if (AUTOGENERATED_KEY in this.#data) {
            return 'Generated password'
        }
        return this.#data.username
    }
    labelSmall (_subtype) {
        if (AUTOGENERATED_KEY in this.#data && this.#data.password) {
            return this.#data.password
        }
        return '•••••••••••••••'
    }
}

/**
 * Generate a stand-in 'CredentialsObject' from a
 * given (generated) password.
 *
 * @param {string} password
 * @returns {CredentialsObject}
 */
function fromPassword (password) {
    return {
        autogenerated: true,
        password: password,
        username: ''
    }
}

/**
 * If the locally generated/stored password ends up being the same
 * as submitted in a subsequent form submission - then we mark the
 * credentials as 'autogenerated' so that the native layer can decide
 * how to process it
 *
 * @type {PreRequest<DataStorageObject, string|null>}
 */
function appendGeneratedId (data, generatedPassword) {
    if (generatedPassword && data.credentials?.password === generatedPassword) {
        return {
            ...data,
            credentials: {
                ...data.credentials,
                [AUTOGENERATED_KEY]: true
            }
        }
    }
    return data
}

module.exports.CredentialsTooltipItem = CredentialsTooltipItem
module.exports.fromPassword = fromPassword
module.exports.appendGeneratedId = appendGeneratedId
module.exports.AUTOGENERATED_KEY = AUTOGENERATED_KEY
