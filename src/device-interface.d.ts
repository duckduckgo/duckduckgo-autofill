interface CredentialsObject {
    id?: string;
    username: string;
    password?: string;
    autogenerated?: boolean;
    credentialsProvider?: 'duckduckgo' | 'bitwarden';
    origin?: {
        url: string;
    };
}

interface IdentityObject {
    id: string;
    title: string;
    firstName?: string;
    middleName?: string;
    lastName?: string;
    birthdayDay?: string;
    birthdayMonth?: string;
    birthdayYear?: string;
    addressStreet?: string;
    addressStreet2?: string;
    addressCity?: string;
    addressProvince?: string;
    addressPostalCode?: string;
    addressCountryCode?: string;
    phone?: string;
    emailAddress?: string;
}

interface InternalIdentityObject extends IdentityObject {
    fullName?: string;
}

interface CreditCardObject {
    id: string;
    title: string;
    displayNumber: string;
    cardName?: string;
    cardSecurityCode?: string;
    expirationMonth?: string;
    expirationYear?: string;
    cardNumber?: string;
}

interface InternalCreditCardObject extends CreditCardObject {
    expiration?: string;
}

interface InboundPMData {
    credentials: CredentialsObject[];
    creditCards: CreditCardObject[];
    identities: IdentityObject[];
    serializedInputContext: string;
}

interface TopContextData {
    inputType: import('./Form/matching').SupportedTypes;
    credentials?: Omit<CredentialsObject, 'id'>[];
    credentialsImport?: boolean;
}

interface PMData {
    credentials: CredentialsObject[];
    creditCards: CreditCardObject[];
    identities: IdentityObject[];
    topContextData?: TopContextData;
}

interface DataStorageObject {
    credentials?: CredentialsObject;
    creditCards?: CreditCardObject;
    identities?: IdentityObject;
    trigger?: 'partialSave' | 'formSubmission' | 'passwordGeneration' | 'emailProtection';
}

interface InternalDataStorageObject {
    credentials: CredentialsObject;
    creditCards: InternalCreditCardObject;
    identities: InternalIdentityObject;
}

type APIResponse<Type> = Promise<{ success: Type[]; error?: string }>;
type APIResponseSingle<Type> = Promise<{ success: Type; error?: string }>;

interface EmailAddresses {
    privateAddress?: string;
    personalAddress?: string;
}

interface GlobalConfig {
    isApp: boolean;
    isDDGApp: boolean;
    isAndroid: boolean;
    isFirefox: boolean;
    isMobileApp: boolean;
    isExtension: boolean;
    isWindows: boolean;
    isTopFrame: boolean;
    secret: string;
    supportsTopFrame: boolean;
    hasModernWebkitAPI: boolean;
    contentScope: import('@duckduckgo/privacy-configuration/schema/config').ConfigV4<number> | null;
    userUnprotectedDomains: string[];
    userPreferences: Record<string, any> | null;
    isDDGTestMode: boolean;
    isDDGDomain: boolean;
    availableInputTypes: import('./deviceApiCalls/__generated__/validators-ts').AvailableInputTypes | null;
    webkitMessageHandlerNames: string[];
}

interface GlobalConfigImpl {
    globalConfig: GlobalConfig;
}

interface PreRequest<T, U> {
    (input: T, additional?: U): T;
}

interface FormExtensionPoints {
    postSubmit?(values: DataStorageObject, form: import('./Form/Form').Form): void;
    postAutofill?(data, dataType: SupportedMainTypes, formObj: import('./Form/Form').Form): void;
}

interface DeviceExtensionPoints {
    preAttachTooltip(topContextData: TopContextData, input: HTMLInputElement, form: { isSignup: boolean | null }): TopContextData;
}
