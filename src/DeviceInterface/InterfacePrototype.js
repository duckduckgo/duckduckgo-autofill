import {
    autofillEnabled,
    notifyWebApp, getDaxBoundingBox, isAutofillEnabledFromProcessedConfig
} from '../autofill-utils.js'

import {getInputType} from '../Form/matching.js'
import {fromPassword, appendGeneratedId, AUTOGENERATED_KEY} from '../InputTypes/Credentials.js'
import {createScanner} from '../Scanner.js'
import {createGlobalConfig} from '../config.js'
import {createTransport} from '../deviceApiCalls/transports/transports.js'
import {Settings} from '../Settings.js'
import {createNotification, createRequest, DeviceApi} from '../../packages/device-api/index.js'
import {
    GetAutofillCredentialsCall,
    StoreFormDataCall,
    SendJSPixelCall,
    GetAutofillInitDataCall,
    SetSizeCall,
    GetAutofillDataCall,
    CloseAutofillParentCall,
} from '../deviceApiCalls/__generated__/deviceApiCalls.js'
import {initFormSubmissionsApi} from './initFormSubmissionsApi.js'
import {processConfig} from "@duckduckgo/content-scope-scripts/src/apple-utils";
import {NativeUIController} from "../UI/controllers/NativeUIController";
import {defaultOptions} from "../UI/HTMLTooltip";
import {HTMLTooltipUIController} from "../UI/controllers/HTMLTooltipUIController";
import {OverlayUIController} from "../UI/controllers/OverlayUIController";
import {LocalData} from "../features/local-data";
import {PasswordGenerator} from "../features/password-generator.js";
import {BitwardenIntegration} from "../features/bitwarden-integration";
import {EmailProtection} from "../features/email-protection";
import {FormFilling} from "../features/form-filling";
import {IncontextSignup} from "../features/incontext-signup";

/**
 * @typedef {import('../deviceApiCalls/__generated__/validators-ts').StoreFormData} StoreFormData
 * @typedef {"macos-legacy" | "macos-modern" | "macos-overlay" | "ios" | "android" | "android" | "windows" | "windows-overlay" | "extension"} Ctx
 * @typedef {import('../deviceApiCalls/__generated__/validators-ts').GetAutofillDataRequest} GetAutofillDataRequest
 */

const TOOLTIP_TYPES = {
    EmailProtection: 'EmailProtection',
    EmailSignup: 'EmailSignup'
}

/**
 * @implements {GlobalConfigImpl}
 * @implements {FormExtensionPoints}
 * @implements {DeviceExtensionPoints}
 */
class InterfacePrototype {
    /** @type {import("../Form/Form").Form | null} */
    activeForm = null

    /** @type {number} */
    get initialSetupDelayMs() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                return this.globalConfig.isDDGTestMode ? 0 : 300
            }
            case "android":
            case "windows":
            case "windows-overlay":
            case "extension":
                break;

        }
        return 0
    }

    autopromptFired = false

    /** @type {boolean} */
    isInitializationStarted;

    /**
     * @param {Ctx} ctx
     * @param {GlobalConfig} config
     * @param {import("../../packages/device-api").DeviceApi} deviceApi
     * @param {Settings} settings
     */
    constructor(ctx, config, deviceApi, settings) {
        this.ctx = ctx
        this.globalConfig = config
        this.deviceApi = deviceApi
        this.settings = settings

        /** @type {import("../UI/controllers/UIController.js").UIController | null} */
        this.uiController = null

        this.localData = new LocalData();
        this.passwordGenerator = new PasswordGenerator();
        this.bitwarden = new BitwardenIntegration(this);
        this.emailProtection = new EmailProtection(this);
        this.formFilling = new FormFilling(this);
        this.incontextSignup = new IncontextSignup(this);

        this.scanner = createScanner(this, {
            initialDelay: this.initialSetupDelayMs
        })
        this.isInitializationStarted = false
    }

    async init() {
        const isEnabled = await this.isEnabled()
        if (!isEnabled) {
            console.log('!isEnabled');
            return
        }

        const handler = async () => {
            if (document.readyState === 'complete') {
                window.removeEventListener('load', handler)
                document.removeEventListener('readystatechange', handler)
                await this.startInit()
            }
        }
        if (document.readyState === 'complete') {
            await this.startInit()
        } else {
            window.addEventListener('load', handler)
            document.addEventListener('readystatechange', handler)
        }
    }

    /**
     * @returns {Promise<boolean>}
     */
    async isEnabled() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios":
            case "android":
                return autofillEnabled(this.globalConfig, processConfig)
            case "windows":
            case "windows-overlay":
                return true
            case "extension": {
                return new Promise(resolve => {
                    chrome.runtime.sendMessage(
                        {
                            registeredTempAutofillContentScript: true,
                            documentUrl: window.location.href
                        },
                        (response) => {
                            if (response && 'site' in response) {
                                resolve(isAutofillEnabledFromProcessedConfig(response))
                            }
                        }
                    )
                })
            }
            default:
                throw new Error('unreachable isEnabled ' + this.ctx)
        }
    }

    async startInit() {

        if (this.isInitializationStarted) return

        this.alreadyInitialized = true

        // done
        await this.settings.refresh()

        // done
        this.addDeviceListeners()

        // init features
        this.localData.init();

        if (this.settings.featureToggles.password_generation) {
            this.passwordGenerator.init();
        }

        if (this.settings.featureToggles.third_party_credentials_provider) {
            this.bitwarden.init();
        }

        if (this.settings.featureToggles.emailProtection) {
            await this.emailProtection.init();
            await this.emailProtection.setupSettingsPage()
        }

        await this.refreshData()

        this.uiController = this.createUIController()

        // this is the temporary measure to support windows whilst we still have 'setupAutofill'
        // eventually all interfaces will use this
        if (!this.isEnabledViaSettings()) {
            return
        }

        await this.postInit()

        if (this.settings.featureToggles.credentials_saving) {
            initFormSubmissionsApi(this.scanner.forms)
        }
    }

    addDeviceListeners() {
        switch (this.ctx) {
            case "windows-overlay":
            case "macos-overlay": {
                /**
                 * The native side will send a custom event 'mouseMove' to indicate
                 * that the HTMLTooltip should fake an element being focused.
                 *
                 * Note: There's no cleanup required here since the Overlay has a fresh
                 * page load every time it's opened.
                 */
                window.addEventListener('mouseMove', (event) => {
                    const activeTooltip = this.uiController?.getActiveTooltip?.()
                    activeTooltip?.focus(event.detail.x, event.detail.y)
                })
                break;
            }
            case "macos-legacy":
            case "macos-modern":
            case "ios":
            case "android":
            case "windows":
            case "extension":
                break;
            default:
                assertUnreachable(this.ctx)
        }
    }

    async refreshData() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                const response = await this.deviceApi.request(createRequest('pmHandlerGetAutofillInitData'))
                this.localData.storeLocalData(response.success)
                break;
            }
            case "android":
            case "windows":
                break;
            case "windows-overlay": {
                const response = await this.deviceApi.request(new GetAutofillInitDataCall(null))
                // @ts-expect-error - the full response is not typed yet
                this.localData.storeLocalData(response)
                break;
            }
            case "extension":
                return this.emailProtection.getAddresses()
            default:
                assertUnreachable(this.ctx)
        }
    }

    /**
     * Implementors should override this with a UI controller that suits
     * their platform.
     *
     * @returns {import("../UI/controllers/UIController.js").UIController}
     */
    createUIController() {
        switch (this.ctx) {
            case "macos-legacy": {
                const options = {
                    ...defaultOptions,
                    testMode: this.isTestMode()
                }
                return new HTMLTooltipUIController(this, 'modern', options)
            }
            case "macos-modern": {
                /**
                 * If we get here, we're just a controller for an overlay
                 */
                return new OverlayUIController({
                    remove: async () => {
                        this.deviceApi.notify(createNotification('closeAutofillParent', {}));
                        this._waiting = false;
                    },
                    show: async (details) => {
                        this._waiting = true;
                        const applePayload = {
                            ...details.triggerContext,
                            serializedInputContext: details.serializedInputContext
                        }
                        this.deviceApi.notify(createNotification('showAutofillParent', applePayload))

                        // start listening for a result
                        const listener = new Promise((resolve) => {
                            // Prevent two timeouts from happening
                            // @ts-ignore
                            const poll = async () => {
                                clearTimeout(this.pollingTimeout)
                                const response = await this.deviceApi.request(createRequest('getSelectedCredentials'))
                                switch (response.type) {
                                    case 'none':
                                        // Parent hasn't got a selected credential yet
                                        // @ts-ignore
                                        this.pollingTimeout = setTimeout(() => {
                                            poll()
                                        }, 100)
                                        return
                                    case 'ok': {
                                        return resolve({data: response.data, configType: response.configType})
                                    }
                                    case 'stop':
                                        // Parent wants us to stop polling
                                        resolve(null)
                                        break
                                }
                            }
                            poll()
                        });
                        listener.then((response) => {
                            if (!response) {
                                return
                            }
                            this.formFilling.selectedDetail(response.data, response.configType)
                        }).catch(e => {
                            console.error('unknown error', e)
                        })
                    }
                })
            }
            case "macos-overlay": {
                return new HTMLTooltipUIController(this, 'modern', {
                    wrapperClass: 'top-autofill',
                    tooltipPositionClass: () => '.wrapper { transform: none; }',
                    setSize: (details) => this.deviceApi.notify(createNotification('setSize', details)),
                    testMode: this.isTestMode()
                })
            }
            case "ios":
            case "android": {
                return new NativeUIController()
            }
            case "windows": {
                /**
                 * If we get here, we're just a controller for an overlay
                 */
                return new OverlayUIController({
                    remove: async () => {
                        if (this._abortController && !this._abortController.signal.aborted) {
                            this._abortController.abort()
                        }
                        this.deviceApi.notify(new CloseAutofillParentCall(null))

                    },
                    show: async (details) => {
                        const {mainType} = details
                        // prevent overlapping listeners
                        if (this._abortController && !this._abortController.signal.aborted) {
                            this._abortController.abort()
                        }
                        this._abortController = new AbortController()
                        this._waiting = true;
                        this.deviceApi.request(new GetAutofillDataCall(details), { signal: this._abortController.signal })
                            .then(resp => {
                                // console.log('got resp', resp.action);
                                if (!this.activeForm) {
                                    throw new Error('this.currentAttached was absent')
                                }
                                switch (resp.action) {
                                    case 'fill': {
                                        if (mainType in resp) {
                                            this.formFilling.selectedDetail(resp[mainType], mainType);
                                        } else {
                                            throw new Error(`action: "fill" cannot occur because "${mainType}" was missing`)
                                        }
                                        break
                                    }
                                    case 'focus': {
                                        this.activeForm?.activeInput?.focus()
                                        break
                                    }
                                    case 'none': {
                                        // do nothing
                                        break
                                    }
                                    default: {
                                        if (this.globalConfig.isDDGTestMode) {
                                            console.warn('unhandled response', resp)
                                        }
                                    }
                                }
                                // this.removeTooltip('windows test')
                            })
                            .catch(e => {
                                if (this.globalConfig.isDDGTestMode) {
                                    if (e.name === 'AbortError') {
                                        console.log('Promise Aborted')
                                    } else {
                                        console.error('Promise Rejected', e)
                                    }
                                }
                            })
                    }
                })
            }
            case "windows-overlay": {
                return new HTMLTooltipUIController(this, 'modern', {
                    wrapperClass: 'top-autofill',
                    tooltipPositionClass: () => '.wrapper { transform: none; }',
                    setSize: (details) => this.deviceApi.notify(new SetSizeCall(details)),
                    testMode: this.isTestMode(),
                    /**
                     * Note: This is needed because Mutation observer didn't support visibility checks on Windows
                     */
                    checkVisibility: false
                })
            }
            case "extension": {
                /** @type {import('../UI/HTMLTooltip.js').HTMLTooltipOptions} */
                const htmlTooltipOptions = {
                    ...defaultOptions,
                    css: `<link rel="stylesheet" href="${chrome.runtime.getURL('public/css/autofill.css')}" crossOrigin="anonymous">`,
                    testMode: this.isTestMode()
                }
                const tooltipKinds = {
                    [TOOLTIP_TYPES.EmailProtection]: 'legacy',
                    [TOOLTIP_TYPES.EmailSignup]: 'emailsignup'
                }
                const tooltipKind = tooltipKinds[this.getActiveTooltipType()] || tooltipKinds[TOOLTIP_TYPES.EmailProtection]

                return new HTMLTooltipUIController(this, tooltipKind, htmlTooltipOptions)
            }
            default:
                assertUnreachable(this.ctx)
        }
    }

    getActiveTooltipType() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios":
            case "android":
            case "windows":
            case "windows-overlay":
                break;
            case "extension": {
                if (this.localData.hasLocalAddresses) {
                    return TOOLTIP_TYPES.EmailProtection
                }

                if (this.settings.featureToggles.emailProtection_incontext_signup && this.settings.incontextSignupPermanentlyDismissed === false) {
                    return TOOLTIP_TYPES.EmailSignup
                }
                break
            }
            default:
                assertUnreachable(this.ctx)
        }

        return null
    }

    /** @type {AbortController|null} */
    _abortController = null;

    /** @type {any} */
    pollingTimeout = null;

    /**
     * @returns {import('../Form/matching').SupportedTypes}
     */
    getCurrentInputType() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                const topContextData = this.localData.getTopContextData()
                return topContextData?.inputType
                    ? topContextData.inputType
                    : getInputType(this.activeForm?.activeInput)
            }
            case "android":
            case "windows":
            case "windows-overlay":
            case "extension":
                break;

        }
        throw new Error('unreachable');
    }



    /**
     * This is to aid the migration to all platforms using Settings.enabled.
     *
     * For now, Windows is the only platform that can be 'enabled' or 'disabled' via
     * the new Settings - which is why in that interface it has `return this.settings.enabled`
     *
     * Whilst we wait for other platforms to catch up, we offer this default implementation
     * of just returning true.
     *
     * @returns {boolean}
     */
    isEnabledViaSettings() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios":
            case "android":
            case "extension":
                break;
            case "windows":
            case "windows-overlay":
                return Boolean(this.settings.enabled)

        }
        return true;
    }

    /**
     * overlay API helpers
     */
    ready = false;

    postInit() {

        const defaultPostInit = () => {
            const cleanup = this.scanner.init()
            this.emailProtection.addLogoutListener(() => {
                cleanup()
                if (this.globalConfig.isDDGDomain) {
                    notifyWebApp({deviceSignedIn: {value: false}})
                }
            })
        }

        const showImmediately = () => {
            const topContextData = this.localData.getTopContextData()
            if (!topContextData) throw new Error('unreachable, topContextData should be available')

            // Provide dummy values
            const getPosition = () => {
                return {
                    x: 0,
                    y: 0,
                    height: 50,
                    width: 50
                }
            }

            // Create the tooltip, and set it as active
            const tooltip = this.uiController?.createTooltip?.(getPosition, topContextData)
            if (tooltip) {
                this.uiController?.setActiveTooltip?.(tooltip)
            }
        }

        switch (this.ctx) {
            case "ios":
            case "android":
            case "macos-legacy":
            case "macos-modern":
            case "windows": {
                defaultPostInit();
                this.ready = true
                return;
            }
            case "macos-overlay":
            case "windows-overlay": {
                showImmediately();
                return;
            }
            case "extension": {
                switch (this.getActiveTooltipType()) {
                    case TOOLTIP_TYPES.EmailProtection: {
                        this._scannerCleanup = this.scanner.init()
                        this.emailProtection.addLogoutListener(() => {
                            this.resetAutofillUI()
                            if (this.globalConfig.isDDGDomain) {
                                notifyWebApp({deviceSignedIn: {value: false}})
                            }
                        })

                        if (this.activeForm?.activeInput) {
                            this.attachTooltip(this.activeForm, this.activeForm?.activeInput, null, 'postSignup')
                        }

                        break
                    }
                    case TOOLTIP_TYPES.EmailSignup: {
                        this._scannerCleanup = this.scanner.init()
                        break
                    }
                    default: {
                        // Don't do anyhing if we don't have a tooltip to show
                        break
                    }
                }
                break;
            }
            default:
                assertUnreachable(this.ctx)
        }
    }

    isTestMode() {
        return this.globalConfig.isDDGTestMode
    }


    /**
     * @param {import("../Form/Form").Form} form
     * @param {HTMLInputElement} input
     * @param {{ x: number; y: number; } | null} click
     * @param {import('../deviceApiCalls/__generated__/validators-ts').GetAutofillDataRequest['trigger']} trigger
     */
    attachTooltip(form, input, click, trigger = 'userInitiated') {
        // Avoid flashing tooltip from background tabs on macOS
        if (document.visibilityState !== 'visible' && trigger !== 'postSignup') return
        // Only autoprompt on mobile devices
        if (trigger === 'autoprompt' && !this.globalConfig.isMobileApp) return
        // Only fire autoprompt once
        if (trigger === 'autoprompt' && this.autopromptFired) return

        form.activeInput = input
        this.activeForm = form
        const inputType = getInputType(input)

        /** @type {PosFn} */
        const getPosition = () => {
            // In extensions, the tooltip is centered on the Dax icon
            const alignLeft = this.globalConfig.isApp || this.globalConfig.isWindows
            return alignLeft ? input.getBoundingClientRect() : getDaxBoundingBox(input)
        }

        // todo: this will be migrated to use NativeUIController soon
        if (this.globalConfig.isMobileApp && inputType === 'identities.emailAddress') {
            this.emailProtection.getAlias().then((alias) => {
                if (alias) form.autofillEmail(alias)
                else form.activeInput?.focus()
            })
            return
        }

        /** @type {TopContextData} */
        const topContextData = {
            inputType
        }

        // Allow features to append/change top context data
        // for example, generated passwords may get appended here
        const processedTopContext = this.preAttachTooltip(topContextData, input, form)

        this.uiController?.attach({
            input,
            form,
            click,
            getPosition,
            topContextData: processedTopContext,
            device: this,
            trigger
        })

        if (trigger === 'autoprompt') {
            this.autopromptFired = true
        }
    }

    isTooltipActive() {
        return this.uiController?.isActive?.() ?? false
    }

    /**
     * @param {string} reason
     * @returns {*}
     */
    removeTooltip(reason) {
        console.log('InterfacePrototype.removeTooltip', reason);
        return this.uiController?.removeTooltip?.('interface')
    }



    /** @returns {Promise<null|Record<any,any>>} */
    async getUserData() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                return this.deviceApi.request(createRequest('emailHandlerGetUserData'))
            }
            case "android": {
                let userData = null

                try {
                    userData = JSON.parse(window.EmailInterface.getUserData())
                } catch (e) {
                    if (this.globalConfig.isDDGTestMode) {
                        console.error(e)
                    }
                }

                return Promise.resolve(userData)
            }
            case "windows":
            case "windows-overlay":
                break;
            case "extension": {
                return new Promise(resolve => chrome.runtime.sendMessage(
                    {getUserData: true},
                    (data) => resolve(data)
                ))
            }
            default:
                assertUnreachable(this.ctx)
        }
        return null;
    }

    /**
     */
    removeUserData() {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                return this.deviceApi.notify(createNotification('emailHandlerRemoveToken'))
            }
            case "android": {
                try {
                    window.EmailInterface.removeCredentials()
                } catch (e) {
                    if (this.globalConfig.isDDGTestMode) {
                        console.error(e)
                    }
                }
                break;
            }
            case "windows":
            case "windows-overlay":
                break;
            case "extension": {
                return chrome.runtime.sendMessage({removeUserData: true})
            }
            default:
                assertUnreachable(this.ctx)
        }
    }



    /**
     * @param {object} data
     * @param {object} data.addUserData
     * @param {string} data.addUserData.token
     * @param {string} data.addUserData.userName
     * @param {string} data.addUserData.cohort
     */
    storeUserData(data) {
        const {addUserData: {token, userName, cohort}} = data;
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                return this.deviceApi.notify(createNotification('emailHandlerStoreToken', {
                    token,
                    username: userName,
                    cohort
                }))
            }
            case "android": {
                return window.EmailInterface.storeCredentials(token, userName, cohort)
            }
            case "windows":
            case "windows-overlay":
                break;
            case "extension": {
                return chrome.runtime.sendMessage(data)
            }
            default:
                assertUnreachable(this.ctx)
        }
    }

    async resetAutofillUI(callback) {
        this.removeAutofillUIFromPage()

        // Start the setup process again
        await this.settings.refresh()
        await this.refreshData()

        if (callback) await callback()

        this.uiController = this.createUIController()
        await this.postInit()

    }

    removeAutofillUIFromPage() {
        this.uiController?.destroy()
        this._scannerCleanup?.()
    }

    /**
     * Gets credentials ready for autofill
     * @param {CredentialsObject['id']} id - the credential id
     * @returns {Promise<CredentialsObject|{success:CredentialsObject}>}
     */
    async getAutofillCredentials(id) {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                return this.deviceApi.request(createRequest('pmHandlerGetAutofillCredentials', {id}))
            }
            case "android":
            case "windows":
            case "windows-overlay":
            case "extension":
                break;
        }
        return this.deviceApi.request(new GetAutofillCredentialsCall({id: String(id)}))
    }

    /**
     * Gets a single complete credit card obj once the user requests it
     * @param {CreditCardObject['id']} id
     * @returns {APIResponse<CreditCardObject>}
     */
    async getAutofillCreditCard(id) {
        return this.deviceApi.request(createRequest('pmHandlerGetCreditCard', {id}))
    }

    /**
     * @param {IdentityObject['id']} id
     * @returns {Promise<{success: IdentityObject|undefined}>}
     */
    async getAutofillIdentity(id) {
        const identity = this.localData.getLocalIdentities().find(({id: identityId}) => `${identityId}` === `${id}`)
        return Promise.resolve({success: identity})
    }

    /** @param {StoreFormData} values */
    storeFormData(values) {
        switch (this.ctx) {
            case "macos-legacy":
            case "macos-modern":
            case "macos-overlay":
            case "ios": {
                return this.deviceApi.notify(createNotification('pmHandlerStoreData', values))
            }
            case "android":
            case "windows":
            case "windows-overlay": {
                return this.deviceApi.notify(new StoreFormDataCall(values))
            }
            case "extension":
                break;
            default:
                assertUnreachable(this.ctx)
        }
    }

    /**
     * `preAttachTooltip` happens just before a tooltip is show - features may want to append some data
     * at this point.
     *
     * For example, if password generation is enabled, this will generate
     * a password and send it to the tooltip as though it were a stored credential.
     *
     * @param {TopContextData} topContextData
     * @param {HTMLInputElement} input
     * @param {{isSignup: boolean|null}} form
     */
    preAttachTooltip(topContextData, input, form) {
        // A list of checks to determine if we need to generate a password
        const checks = [
            topContextData.inputType === 'credentials.password',
            this.settings.featureToggles.password_generation,
            form.isSignup
        ]

        // if all checks pass, generate and save a password
        if (checks.every(Boolean)) {
            const password = this.passwordGenerator.generate({
                input: input.getAttribute('passwordrules'),
                domain: window.location.hostname
            })

            // append the new credential to the topContextData so that the top autofill can display it
            topContextData.credentials = [fromPassword(password)]
        }

        return topContextData
    }

    /**
     * `postAutofill` gives features an opportunity to perform an action directly
     * following an autofill.
     *
     * For example, if a generated password was used, we want to fire a save event.
     *
     * @param {IdentityObject|CreditCardObject|CredentialsObject} data
     * @param {SupportedMainTypes} dataType
     * @param {import("../Form/Form").Form} formObj
     */
    postAutofill(data, dataType, formObj) {
        if (AUTOGENERATED_KEY in data && 'password' in data) {
            const formValues = formObj.getValues()
            if (formValues.credentials?.password === data.password) {
                const withAutoGeneratedFlag = appendGeneratedId(formValues, data.password)
                this.storeFormData(withAutoGeneratedFlag)
            }
        }

        if (dataType === 'credentials' && this.settings.globalConfig.isMobileApp) {
            formObj.attemptSubmissionIfNeeded()
        }
    }

    /**
     * `postSubmit` gives features a one-time-only opportunity to perform an
     * action directly after a form submission was observed.
     *
     * Mostly this is about storing data from the form submission, but it can
     * also be used like in the case of Password generation, to append additional
     * data before it's sent to be saved.
     *
     * @param {DataStorageObject} values
     * @param {import("../Form/Form").Form} form
     */
    postSubmit(values, form) {
        if (!form.form) return
        if (!form.hasValues(values)) return
        const checks = [
            form.shouldPromptToStoreData,
            this.passwordGenerator.generated
        ]

        if (checks.some(Boolean)) {
            const withAutoGeneratedFlag = appendGeneratedId(values, this.passwordGenerator.password)
            this.storeFormData(withAutoGeneratedFlag)
        }
    }

    /**
     * Sends a pixel to be fired on the client side
     * @param {import('../deviceApiCalls/__generated__/validators-ts').SendJSPixelParams} pixelParams
     */
    firePixel(pixelParams) {
        this.deviceApi.notify(new SendJSPixelCall(pixelParams))
    }

    /**
     * This serves as a single place to create a default instance
     * of InterfacePrototype that can be useful in testing scenarios
     * @returns {InterfacePrototype}
     */
    static default() {
        const globalConfig = createGlobalConfig()
        const transport = createTransport('macos-legacy', globalConfig)
        const deviceApi = new DeviceApi(transport)
        const settings = Settings.default(globalConfig, deviceApi)
        return new InterfacePrototype('macos-legacy', globalConfig, deviceApi, settings)
    }
}

export default InterfacePrototype

/**
 * @param {never} x
 * @returns {never}
 */
function assertUnreachable(x) {
    console.log(x)
    throw new Error("Didn't expect to get here");
}
