import { DataHTMLTooltip } from '../src/UI/DataHTMLTooltip.js';
import { CredentialsImportTooltip } from '../src/UI/CredentialsImportTooltip.js';
import { IdentityTooltipItem } from '../src/InputTypes/Identity.js';
import { defaultOptions } from '../src/UI/HTMLTooltip.js';
import { getTranslator } from '../src/locales/strings.js';

import { AUTOGENERATED_KEY, createCredentialsTooltipItem } from '../src/InputTypes/Credentials.js';
import { CreditCardTooltipItem } from '../src/InputTypes/CreditCard.js';

/**
 * @import InterfacePrototype from './DeviceInterface/InterfacePrototype.js';
 */

const url = new URL(window.location.href);
const locale = url.searchParams.get('locale') || 'en';
const platform = url.searchParams.get('platform') || 'macos';

const credentials = [
    {
        data: [
            createCredentialsTooltipItem({ id: 'abc', username: 'dax@example.com', origin: { url :'fill.dev' } }),
            createCredentialsTooltipItem({ id: 'def', username: 'shakyshane@example.com' }),
        ],
        type: 'credentials.username',
    },
    {
        title: "password only",
        data: [
            createCredentialsTooltipItem({ id: 'def', password: '1234567', username: 'mscott@dundermifflinonline.com', origin: { url: 'fill.dev' } })
        ],
        type: 'credentials.password',
    },
    {
        data: [
            createCredentialsTooltipItem({ id: 'somethingelse', username: '', password: '$124rg345h55aq67', [AUTOGENERATED_KEY]: true }),
        ],
        type: 'credentials.password.new',
    },
    {
        data: [
            createCredentialsTooltipItem({
                credentialsProvider: 'bitwarden',
                id: 'provider_locked',
                password: '1234567',
                username: 'dax@example.com',
            }),
        ],
        type: 'credentials.password',
    },
]

const identities = [
    {
        data: [
            new IdentityTooltipItem({
                firstName: 'Shane',
                lastName: 'Osbourne',
                id: '',
                title: 'Main',
            }),
        ],
        type: 'identities.firstName',
    },
];

const creditCards = [
    {
        data: [
            new CreditCardTooltipItem({ id: 'a', displayNumber: '1234', cardName: 'monzo', title: 'Monzo', expirationMonth: '1', expirationYear: '2025' }),
            new CreditCardTooltipItem({ id: 'c', displayNumber: '2312', cardName: 'revolut', title: 'Revolut' }),
        ],
        type: 'creditCards.cardNumber',
    },
]

const emails = [
    {
        data: [],
        title: 'in-context email signup only',
        type: 'identities.emailAddress',
        options: {
            isIncontextSignupAvailable: () => true,
        },
    },
    {
        title: 'in-context email signup + item',
        data: [
            new IdentityTooltipItem({
                id: 'personalAddress',
                emailAddress: 'dax@example.com',
                title: 'Block email trackers',
            }),
        ],
        type: 'identities.emailAddress',
        options: {
            isIncontextSignupAvailable: () => true,
        },
    },
    {
        title: 'personal/private email address',
        data: [
            new IdentityTooltipItem({
                id: 'personalAddress',
                emailAddress: 'dax@example.com',
                title: 'Block email trackers',
            }),
            new IdentityTooltipItem({
                id: 'privateAddress',
                emailAddress: '34534r_23edx@example.com',
                title: 'Block email trackers and hide address',
            }),
        ],
        type: 'identities.emailAddress',
    },
];

const main = document.querySelector('main');

credentials.forEach((iden, index) => createTooltip(iden, index));
identities.forEach((iden, index) => createTooltip(iden, index));
creditCards.forEach((iden, index) => createTooltip(iden, index));
emails.forEach((iden, index) => createTooltip(iden, index));

function createTooltip(item, index) {
    const elem = document.createElement('code');
    elem.textContent = item.title || item.type;
    elem.style.position = 'relative';
    elem.id = `iden-${index}`;
    elem.dataset.length = String(item.data.length);

    const getPosition = () => {
        return elem.getBoundingClientRect();
    };

    const lines = item.data;
    const d = new DataHTMLTooltip(item.type, getPosition, {
        ...defaultOptions,
        ...item.options,
        isTopAutofill: true,
        platform,
    });

    main?.appendChild(elem);
    const device = /** @type {InterfacePrototype} */ ({ t: getTranslator({ language: locale }) });
    d.render(device, /** @type {any} */ ({ type: item.type.split('.')[0] }), lines, {
        onIncontextSignup() {},
        onIncontextSignupDismissed(p0) {
            console.log(p0);
        },
        onManage(p0) {
            console.log(p0);
        },
        onSelect(p0) {
            console.log(p0);
        },
    });
}

const importTooltips = [
    { type: 'import', title: 'import' }
];

importTooltips.forEach((iden, index) => {
    const elem = document.createElement('code');
    elem.textContent = iden.title || iden.type;
    elem.style.position = 'relative';
    elem.id = `iden-importTooltips-${index}`;

    const getPosition = () => {
        return elem.getBoundingClientRect();
    };

    const d = new CredentialsImportTooltip(iden.type, getPosition, {
        ...defaultOptions,
        ...iden.options,
        isTopAutofill: false,
        platform,
        // isIncontextSignupAvailable: () => true
    });

    main?.appendChild(elem);

    const device = /** @type {InterfacePrototype} */ ({ t: getTranslator({ language: locale }) });

    d.render(device, {
        onStarted: function () {
            throw new Error('Function not implemented.');
        },
        onDismissed: function () {
            throw new Error('Function not implemented.');
        },
    });
});
